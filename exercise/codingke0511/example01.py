"""
面向对象程序设计：把一组数据和处理数据的方法组成对象，把行为相同的对象归纳分类，
通过封装隐藏对象的内部细节，通过继承实现类的特化和泛化，通过多态实现基于对象类型的动态分派。

对象 ---> 接收消息的实体，具体概念
1. 一切皆为对象
2. 对象都有属性（静态特征）和行为特征（动态特征）
3. 每一个对象都是独一无二的
4. 对象一定属于某个类
类 ---> 一大堆属性和行为相同的对象的抽象，创建对象的蓝图和模板，类是抽象概念。

通过定义类可以创建新的数据类型，定义类通常要做两件事情:
1. 数据抽象 ---> 找属性 ---> 名词
2. 行为抽象 ---> 找行为 ---> 动词

写在类中的函数通常称为对象的方法，也就是对象可以接收的消息
"""


# 1. 定义类
class Student:
    """学生类"""

    # Python程序中__开头和结尾的属性和方法都有特殊的用途和意义
    # 初始化方法 ---> 魔法方法（魔法方法） ---> 有特殊用途
    def __init__(self, stuid, name):
        self.id = stuid
        self.name = name
    def study(self, *course_names):
        """学习"""
        for course_name in course_names:
            print(f'{self.name}学生正在学习{course_name}')

    def play(self):
        """玩耍"""
        print(f'{self.name}学生正在玩耍')


# 2. 创建对象
# 有了类就可以创建对象 ---> 构造器语法 ---> 创建对象的语法
# 我们定义的变量就是对象的引用，通过他就可以访问到内存中的对象
stu1 = Student(1001, '赵白石')
# 3. 给对象发消息
# Student.study(stu1, 'Python程序设计')
stu1.study('Python程序设计', 'Web前端开发', 'Mysql数据库应用', '数据分析从入门到精通')
stu2 = Student(1002, '王世均')
stu2.play()


